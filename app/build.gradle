apply plugin: 'com.android.application'
apply plugin: kotlinPlug

Properties properties = new Properties()
properties.load(rootProject.file('local.properties').newDataInputStream())
android {
    compileSdkVersion targetVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        applicationId "me.leon.quickdev"
        minSdkVersion minVer
        targetSdkVersion targetVer
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexKeepFile file ('multidex.keep')

        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a' //, 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
        vectorDrawables.useSupportLibrary = true
//        multiDexEnabled true
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "b95be6a928154da14de35764", // 极光key
                JPUSH_CHANNEL: "default", //暂时填写默认值即可.
                UMENG_APPKEY : "5a3cb44cf29d985cb7000211", //  umeng key
                AMap         : "3d415ef287bdcd5fc13012a327e086bd" //  高德 key
        ]
    }
    signingConfigs {
        Sign {
            keyAlias alias
            keyPassword properties.getProperty('pwd')
            storeFile file('../keystore.jks')
            storePassword properties.getProperty('pwd')
        }
    }
    flavorDimensions "default"
    productFlavors {
        official {
//            resValue "string", "app_name", "LoveU"
            manifestPlaceholders = [
                    UMENG_CHANNEL: 'OFFICIAL',
                    JPUSH_CHANNEL: 'OFFICIAL']
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.Sign
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.Sign
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
        //是否支持大工程模式
        jumboMode = true
        //预编译
       // preDexLibraries = true
        //线程数
        threadCount = 8
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }


    flavorDimensions "default"
    productFlavors {
        official {
//            resValue "string", "app_name", "LoveU"
            manifestPlaceholders = [
                    UMENG_CHANNEL: 'OFFICIAL',
                    JPUSH_CHANNEL: 'OFFICIAL']
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '26.0.2'
                }
            }
        }
    }
}




dependencies {
    implementation project(':baselibs')
    //    annotationProcessor knifeAPT //不能写在base库中
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    kapt knifeAPT
    //不能写在base库中
    releaseImplementation leakcanary.release
    debugImplementation leakcanary.debug
    implementation jpush.core
    implementation jpush.push
    implementation photoView
    implementation rx.permission
    implementation 'me.leon406:devsuit:1.0.2'
    implementation 'com.lzy.net:okrx2:2.0.2'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'me.leon406:picture_library:1.2.4'

    //    implementation aMap.map3d
    implementation 'com.amap.api:location:3.4.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVer"
    testImplementation 'junit:junit:4.12'

}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
String getProperties(String key) {

    return properties.getProperty(key)
}

afterEvaluate {
    tasks.matching{
        it.name.startsWith('create') && it.name.endsWith('MainDexClassList')
    }.each { tk ->
        tk.doLast {
            keepMainMultiDex(tk.outputFile)
        }
    }
}

/**
 * 控制MainDex中的class列表
 * 将multidex.keep的内容追加到 maindexlist.txt 中
 * @param outputFile
 */
def keepMainMultiDex(File outputFile){
    File keepFile = file("multidex.keep")
    outputFile << '\n'
    outputFile << keepFile.getText('UTF-8')
}

